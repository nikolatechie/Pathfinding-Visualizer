{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","PathfindingAlgorithms/dfs.js","PathfindingAlgorithms/astar.js","PathfindingAlgorithms/bidirectionalSearch.js","PathfindingVisualizer/PathfindingVisualizer.jsx","PathfindingAlgorithms/dijkstra.js","PathfindingAlgorithms/bfs.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","isStart","isFinish","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","React","Component","depthFirstSearch","grid","finRow","finCol","crossingCorners","visitedNodesInOrder","dfs","node","isVisited","push","dirx","diry","i","length","newRow","newCol","previousNode","isValid","calculateHValue","j","Math","abs","ROWS","COLS","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","updateWindowDimensions","setState","width","window","innerWidth","height","innerHeight","getInitialGrid","calculateDimensions","dimensionReset","document","getElementById","innerText","toggleCheckbox","state","toggleButtons","buttons","querySelectorAll","animationInProgress","style","mouseIsPressed","addEventListener","oldNodeIsWall","newGrid","createNode","path","setTimeout","finishNode","removePaths","NUMBER_OF_OBSTACLES","floor","x","random","y","walls","initialGrid","getWalls","checkboxVal","checked","distance","nodes","sort","nodeA","nodeB","n","shift","exploredNodes","dijkstrasAlgo","getPath","animateFoundPath","startRow","startCol","cellDetails","cell","newCell","parent_i","parent_j","f","g","h","Number","MAX_VALUE","openList","gNew","hNew","fNew","newLvl","idx","ii","jj","withCheckbox","elemA","elemB","aStarSearch","q","empty","breadthFirstSearch","q1","q2","table","tmp","row1","col1","row2","col2","newRow1","newRow2","newCol1","newCol2","bidirectionalSearch","leftNode","rightNode","reverse","disabled","onClick","resetGrid","type","onChange","dijkstra","aStar","bfs","createRandomGrid","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","href","curRow","Infinity","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8454facd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Node.css';\r\n\r\nexport default class Node extends React.Component {\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            isStart,\r\n            isFinish,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n        } = this.props;\r\n\r\n        const extraClassName = isStart\r\n        ? 'node-start'\r\n        : isFinish\r\n        ? 'node-finish'\r\n        : isWall\r\n        ? 'node-wall'\r\n        : '';\r\n\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}>\r\n            </div>\r\n        );\r\n    }\r\n}","export function depthFirstSearch(grid, row, col, finRow, finCol, crossingCorners) {\r\n    const visitedNodesInOrder = [];\r\n    dfs(grid, row, col, finRow, finCol, visitedNodesInOrder, crossingCorners);\r\n    return visitedNodesInOrder;\r\n}\r\n\r\nfunction dfs(grid, row, col, finRow, finCol, visitedNodesInOrder, crossingCorners) {\r\n    let node = grid[row][col];\r\n    node.isVisited = true;\r\n    if (node.isFinish) return; // traverse until finish node is reached\r\n    visitedNodesInOrder.push(node);\r\n    let dirx = [-1, 0, 1, 0];\r\n    let diry = [0, 1, 0, -1];\r\n\r\n    if (crossingCorners) { // 8 neighbor-nodes\r\n        dirx = [-1, -1, -1, 0, 0, 1, 1, 1];\r\n        diry = [-1, 0, 1, -1, 1, -1, 0, 1];\r\n    }\r\n\r\n    for (let i = 0; i < dirx.length && !grid[finRow][finCol].isVisited; ++i) {\r\n        const newRow = row+dirx[i];\r\n        const newCol = col+diry[i];\r\n\r\n        if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length && !grid[newRow][newCol].isVisited && !grid[newRow][newCol].isWall) {\r\n            grid[newRow][newCol].previousNode = node;\r\n            dfs(grid, newRow, newCol, finRow, finCol, visitedNodesInOrder, crossingCorners);\r\n        }\r\n    }\r\n}","function createCell() {\r\n    return {\r\n        parent_i: -1,\r\n        parent_j: -1,\r\n        f: 0.0,\r\n        g: 0.0,\r\n        h: 0.0,\r\n    }\r\n}\r\n\r\nfunction isValid(grid, row, col) {\r\n    return (row >= 0 && row < grid.length && col >= 0 && col < grid[0].length && !grid[row][col].isWall);\r\n}\r\n\r\nexport function aStarSearch(grid, startRow, startCol, finRow, finCol, checkboxVal) {\r\n    let cellDetails = [];\r\n    let visitedNodesInOrder = [];\r\n\r\n    for (let i = 0; i < grid.length; ++i) {\r\n        let cell = [];\r\n\r\n        for (let j = 0; j < grid[0].length; ++j)\r\n        {\r\n            let newCell = createCell();\r\n            newCell.f = Number.MAX_VALUE;\r\n            newCell.g = Number.MAX_VALUE;\r\n            newCell.h = Number.MAX_VALUE;\r\n            cell.push(newCell);\r\n        }\r\n\r\n        cellDetails.push(cell);\r\n    }\r\n\r\n    const i = startRow, j = startCol;\r\n    cellDetails[i][j].f = 0.0;\r\n    cellDetails[i][j].g = 0.0;\r\n    cellDetails[i][j].h = 0.0;\r\n    cellDetails[i][j].parent_i = i;\r\n    cellDetails[i][j].parent_j = j;\r\n    let openList = [];\r\n    openList.push([0.0, i, j]);\r\n    var dirx = [-1, 0, 0, 1];\r\n    var diry = [0, -1, 1, 0];\r\n\r\n    if (checkboxVal) {\r\n        dirx = [-1, 0, 0, 1, -1, -1, 1, 1];\r\n        diry = [0, -1, 1, 0, -1, 1, -1, 1];\r\n    }\r\n\r\n    while (openList.length) {\r\n        let i = openList[0][1], j = openList[0][2];\r\n        openList.shift();\r\n        grid[i][j].isVisited = true;\r\n        let gNew, hNew, fNew;\r\n        let newLvl = [];\r\n\r\n        // check all possible directions and update the values\r\n        for (let idx = 0; idx < dirx.length; ++idx) {\r\n            let ii = i + dirx[idx];\r\n            let jj = j + diry[idx];\r\n            const withCheckbox = (idx < 4 || (idx > 3 && checkboxVal));\r\n\r\n            if (isValid(grid, ii, jj) && withCheckbox) {\r\n                if (grid[ii][jj].isFinish) {\r\n                    cellDetails[ii][jj].parent_i = i;\r\n                    cellDetails[ii][jj].parent_j = j;\r\n                    grid[ii][jj].previousNode = grid[i][j];\r\n                    if (newLvl.length) visitedNodesInOrder.push(newLvl);\r\n                    return visitedNodesInOrder;\r\n                }\r\n                else if (!grid[ii][jj].isVisited) {\r\n                    gNew = cellDetails[i][j].g + 1.0;\r\n                    if (idx > 3 && withCheckbox) gNew += 0.4;\r\n                    hNew = calculateHValue(ii, jj, finRow, finCol);\r\n                    fNew = gNew + hNew;\r\n\r\n                    if (cellDetails[ii][jj].f === Number.MAX_VALUE || cellDetails[ii][jj].f > fNew) {\r\n                        openList.push([fNew, ii, jj]);\r\n                        openList.sort((elemA, elemB) => elemA[0] - elemB[0]);\r\n                        newLvl.push([ii, jj]);\r\n                        cellDetails[ii][jj].f = fNew;\r\n                        cellDetails[ii][jj].g = gNew;\r\n                        cellDetails[ii][jj].h = hNew;\r\n                        cellDetails[ii][jj].parent_i = i;\r\n                        cellDetails[ii][jj].parent_j = j;\r\n                        grid[ii][jj].previousNode = grid[i][j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        visitedNodesInOrder.push(newLvl);\r\n    }\r\n\r\n    return visitedNodesInOrder;\r\n}\r\n\r\n// heuristic; approximate distance between current node and finish node\r\nfunction calculateHValue(i, j, finRow, finCol) {\r\n    return Math.abs(finRow - i) + Math.abs(finCol - j);\r\n}","export function bidirectionalSearch(grid, startRow, startCol, finRow, finCol, checkboxVal) {\r\n    const visitedNodesInOrder = [];\r\n    let q1 = [], q2 = [];\r\n    let dirx = [-1, 1, 0, 0];\r\n    let diry = [0, 0, -1, 1];\r\n    q1.push([startRow, startCol]);\r\n    q2.push([finRow, finCol]);\r\n    let table = [];\r\n\r\n    // tracking visited nodes for both groups (from starting node and finishing node)\r\n    for (let i = 0; i < grid.length; ++i) {\r\n        let tmp = [];\r\n\r\n        for (let j = 0; j < grid[0].length; ++j)\r\n            tmp.push(false);\r\n        \r\n        table.push(tmp);\r\n    }\r\n\r\n    if (checkboxVal) {\r\n        dirx = [-1, -1, -1, 0, 0, 1, 1, 1];\r\n        diry = [-1, 0, 1, -1, 1, -1, 0, 1];\r\n    }\r\n\r\n    // BFS from start and finish nodes\r\n    while (q1.length || q2.length) {\r\n        const [row1, col1] = (!q1.length) ? [-1, -1]:q1.shift();\r\n        const [row2, col2] = (!q2.length) ? [-1, -1]:q2.shift();\r\n        if (isValid(grid, row1, col1)) grid[row1][col1].isVisited = true;\r\n        if (isValid(grid, row2, col2)) table[row2][col2] = true;\r\n        let newLvl = [];\r\n\r\n        for (let i = 0; i < dirx.length; ++i) {\r\n            const newRow1 = row1 + dirx[i];\r\n            const newRow2 = row2 + dirx[i];\r\n            const newCol1 = col1 + diry[i];\r\n            const newCol2 = col2 + diry[i];\r\n\r\n            // checking for intersection\r\n            if (isValid(grid, row1, col1) && isValid(grid, newRow1, newCol1)) {\r\n                if (!grid[newRow1][newCol1].isVisited && !grid[newRow1][newCol1].isWall) {\r\n                    if (table[newRow1][newCol1]) {\r\n                        if (newLvl.length) visitedNodesInOrder.push(newLvl);\r\n                        return [visitedNodesInOrder, grid[row1][col1], grid[newRow1][newCol1]];\r\n                    }\r\n\r\n                    grid[newRow1][newCol1].isVisited = true;\r\n                    grid[newRow1][newCol1].previousNode = grid[row1][col1];\r\n                    q1.push([newRow1, newCol1]);\r\n                    newLvl.push([newRow1, newCol1]);\r\n                }\r\n            }\r\n\r\n            // checking for intersection\r\n            if (isValid(grid, row2, col2) && isValid(grid, newRow2, newCol2)) {\r\n                if (!table[newRow2][newCol2] && !grid[newRow2][newCol2].isWall) {\r\n                    if (grid[newRow2][newCol2].isVisited) {\r\n                        if (newLvl.length) visitedNodesInOrder.push(newLvl);\r\n                        return [visitedNodesInOrder, grid[newRow2][newCol2], grid[row2][col2]];\r\n                    }\r\n\r\n                    table[newRow2][newCol2] = true;\r\n                    grid[newRow2][newCol2].previousNode = grid[row2][col2];\r\n                    q2.push([newRow2, newCol2]);\r\n                    newLvl.push([newRow2, newCol2]);\r\n                }\r\n            }\r\n        }\r\n\r\n        visitedNodesInOrder.push(newLvl);\r\n    }\r\n\r\n    return [visitedNodesInOrder, grid[startRow][startCol], grid[finRow][finCol]];\r\n}\r\n\r\nfunction isValid(grid, row, col) {\r\n    return (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) ? false:true;\r\n}","import React from 'react';\r\nimport Node from './Node/Node';\r\nimport './PathfindingVisualizer.css';\r\nimport {depthFirstSearch} from '../PathfindingAlgorithms/dfs';\r\nimport {breadthFirstSearch} from '../PathfindingAlgorithms/bfs';\r\nimport {dijkstrasAlgo} from '../PathfindingAlgorithms/dijkstra';\r\nimport {aStarSearch} from '../PathfindingAlgorithms/astar';\r\nimport {bidirectionalSearch} from '../PathfindingAlgorithms/bidirectionalSearch';\r\n\r\nvar ROWS = 0;\r\nvar COLS = 53;\r\nvar START_NODE_ROW = 9;\r\nvar START_NODE_COL = 9;\r\nvar FINISH_NODE_ROW = 9;\r\nvar FINISH_NODE_COL = 43;\r\n\r\nexport default class PathfindingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n            crossingCorners: false,\r\n            animationInProgress: false,\r\n            width: 0,\r\n            height: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n        const grid = getInitialGrid();\r\n        this.setState({grid});\r\n    }\r\n\r\n    updateWindowDimensions = () => {\r\n        this.setState({width: window.innerWidth, height: window.innerHeight});\r\n        const grid = getInitialGrid();\r\n        this.setState({grid});\r\n        calculateDimensions();\r\n        this.dimensionReset(); // remove previous paths\r\n\r\n        // change text of BFS and DFS buttons depending on the width\r\n        if (window.innerWidth >= 740 && window.innerWidth < 1440) {\r\n            document.getElementById('bfs-button').innerText = 'Breadth-first search';\r\n            document.getElementById('dfs-button').innerText = 'Depth-first search';\r\n        }\r\n        else {\r\n            document.getElementById('bfs-button').innerText = 'BFS';\r\n            document.getElementById('dfs-button').innerText = 'DFS';\r\n        }\r\n    }\r\n\r\n    dimensionReset() {\r\n        const {grid} = this.state;\r\n\r\n        for (let row = 0; row < grid.length; ++row) {\r\n            for (let col = 0; col < grid[0].length; ++col) {\r\n                if (!grid[row][col].isStart && !grid[row][col].isFinish)\r\n                    document.getElementById(`node-${row}-${col}`).className = 'node';\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleCheckbox = () => {\r\n        this.setState({crossingCorners: !this.state.crossingCorners});\r\n    }\r\n\r\n    toggleButtons = () => { // enabling/disabling buttons depending on the animation\r\n        let buttons = document.querySelectorAll('button');\r\n\r\n        for (let i = 0; i < buttons.length; ++i) {\r\n            if (this.state.animationInProgress)\r\n                buttons[i].style = 'opacity: 1';\r\n            else\r\n                buttons[i].style = 'opacity: 0.65';\r\n        }\r\n\r\n        this.setState({animationInProgress: !this.state.animationInProgress});\r\n    }\r\n\r\n    handleMouseDown(row, col) { // put/remove a wall\r\n        const oldNodeIsWall = this.state.grid[row][col].isWall;\r\n        const newGrid = this.state.grid;\r\n        newGrid[row][col] = createNode(row, col);\r\n        newGrid[row][col].isWall = !oldNodeIsWall;\r\n        this.setState({grid: newGrid, mouseIsPressed: true});\r\n    }\r\n\r\n    handleMouseEnter(row, col) { // put/remove a wall\r\n        if (!this.state.mouseIsPressed) return; // or do nothing if mouse is not pressed\r\n        const oldNodeIsWall = this.state.grid[row][col].isWall;\r\n        const newGrid = this.state.grid;\r\n        newGrid[row][col] = createNode(row, col);\r\n        newGrid[row][col].isWall = !oldNodeIsWall;\r\n        this.setState({grid: newGrid});\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({mouseIsPressed: false});\r\n    }\r\n\r\n    animateFoundPath(path) {\r\n        for (let i = 1; i < path.length-1; ++i) {\r\n            const node = path[i];\r\n            \r\n            setTimeout(() => { // coloring the found path\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\r\n            }, 25*i);\r\n        }\r\n    }\r\n\r\n    getPath(finishNode) { // between start and finish node\r\n        const path = [];\r\n        let node = finishNode;\r\n\r\n        while (node !== null) {\r\n            path.push(node);\r\n            node = node.previousNode;\r\n        }\r\n\r\n        return path;\r\n    }\r\n\r\n    createRandomGrid() {\r\n        this.removePaths(); // clear paths from previous search\r\n        const grid = getInitialGrid();\r\n        const NUMBER_OF_OBSTACLES = Math.floor((ROWS * COLS) / 5);\r\n\r\n        for (let i = 0; i < NUMBER_OF_OBSTACLES; ++i) { // randomly choosing coordinates of walls\r\n            let x = Math.floor(Math.random() * ROWS);\r\n            let y = Math.floor(Math.random() * COLS);\r\n\r\n            if (!grid[x][y].isWall && !grid[x][y].isStart && !grid[x][y].isFinish) {\r\n                grid[x][y] = createNode(x, y);\r\n                grid[x][y].isWall = true;\r\n            }\r\n        }\r\n\r\n        this.setState({grid});\r\n    }\r\n\r\n    resetGrid() { // resetting everything\r\n        const grid = getInitialGrid();\r\n\r\n        for (let row = 0; row < ROWS; ++row) {\r\n            for (let col = 0; col < COLS; ++col) {\r\n                if (!(row === START_NODE_ROW && col === START_NODE_COL) && !(row === FINISH_NODE_ROW && col === FINISH_NODE_COL))\r\n                    document.getElementById(`node-${row}-${col}`).className = 'node';\r\n            }\r\n        }\r\n\r\n        this.setState({grid});\r\n    }\r\n\r\n    getWalls() { // get indices of all walls in a grid\r\n        const {grid} = this.state;\r\n        const walls = [];\r\n\r\n        for (let row = 0; row < ROWS; ++row) {\r\n            for (let col = 0; col < COLS; ++col) {\r\n                if (grid[row][col].isWall)\r\n                    walls.push([row, col]);\r\n\r\n                if (!grid[row][col].isStart && !grid[row][col].isFinish)\r\n                    document.getElementById(`node-${row}-${col}`).className = 'node';\r\n            }\r\n        }\r\n\r\n        return walls;\r\n    }\r\n\r\n    removePaths() { // clears paths, walls stay there\r\n        const initialGrid = getInitialGrid();\r\n        const walls = this.getWalls();\r\n\r\n        for (let i = 0; i < walls.length; ++i) {\r\n            const [row, col] = walls[i];\r\n            initialGrid[row][col].isWall = true;\r\n            document.getElementById(`node-${row}-${col}`).className = 'node node-wall';\r\n        }\r\n\r\n        this.setState({grid: initialGrid});\r\n    }\r\n\r\n    dijkstra() {\r\n        this.toggleButtons(); // disable buttons\r\n        this.removePaths(); // clear paths from previous search\r\n        const {grid} = this.state;\r\n        const checkboxVal = (document.getElementById('check').checked === true); // 4 additional neighbors\r\n        const visitedNodesInOrder = dijkstrasAlgo(grid, START_NODE_ROW, START_NODE_COL, checkboxVal);\r\n        const path = this.getPath(grid[FINISH_NODE_ROW][FINISH_NODE_COL]);\r\n\r\n        // animation\r\n        for (let i = 0; i <= visitedNodesInOrder.length; ++i) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateFoundPath(path);\r\n                }, 20 * i);\r\n\r\n                setTimeout(() => { // wait until animation ends\r\n                    this.toggleButtons(); // and then activate buttons\r\n                }, 20 * i + 25 * (path.length + 1));\r\n\r\n                return;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let j = 0; j < visitedNodesInOrder[i].length; ++j) {\r\n                    const node = visitedNodesInOrder[i][j];\r\n                    const row = node.row;\r\n                    const col = node.col;\r\n\r\n                    if (!grid[row][col].isFinish)\r\n                        document.getElementById(`node-${row}-${col}`).className = 'node node-explore';\r\n                }\r\n            }, 20 * i);\r\n        }\r\n    }\r\n\r\n    aStar() {\r\n        this.toggleButtons(); // disable buttons\r\n        this.removePaths(); // clear paths from previous search\r\n        const {grid} = this.state;\r\n        const checkboxVal = (document.getElementById('check').checked === true); // 4 additional neighbors\r\n        const visitedNodesInOrder = aStarSearch(grid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, checkboxVal);\r\n        const path = this.getPath(grid[FINISH_NODE_ROW][FINISH_NODE_COL]);\r\n\r\n        // animation\r\n        for (let i = 0; i <= visitedNodesInOrder.length; ++i) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateFoundPath(path);\r\n                }, 34 * i);\r\n\r\n                setTimeout(() => {\r\n                    this.toggleButtons();\r\n                }, 34 * i + 25 * (path.length + 1));\r\n\r\n                return;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let j = 0; j < visitedNodesInOrder[i].length; ++j) {\r\n                    const [row, col] = visitedNodesInOrder[i][j];\r\n                    document.getElementById(`node-${row}-${col}`).className = 'node node-explore';\r\n                }\r\n            }, 34 * i);\r\n        }\r\n    }\r\n\r\n    bfs() {\r\n        this.toggleButtons(); // disable buttons\r\n        this.removePaths(); // clear paths from previous searches\r\n        const {grid} = this.state;\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const checkboxVal = (document.getElementById('check').checked === true); // 4 additional neighbors\r\n        const visitedNodesInOrder = breadthFirstSearch(grid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, checkboxVal);\r\n        const path = this.getPath(finishNode);\r\n\r\n        // animation\r\n        for (let i = 0; i <= visitedNodesInOrder.length; ++i) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateFoundPath(path);\r\n                }, 15 * i);\r\n\r\n                setTimeout(() => { // wait until animation ends\r\n                    this.toggleButtons(); // and then activate buttons\r\n                }, 15 * i + 25 * (path.length + 1));\r\n\r\n                return;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let j = 0; j < visitedNodesInOrder[i].length; ++j) {\r\n                    const [row, col] = visitedNodesInOrder[i][j];\r\n                    document.getElementById(`node-${row}-${col}`).className = 'node node-explore';\r\n                }\r\n            }, 15 * i);\r\n        }\r\n    }\r\n\r\n    bidirectionalSearch() {\r\n        this.toggleButtons(); // disable buttons\r\n        this.removePaths(); // clear paths from previous search\r\n        const {grid} = this.state;\r\n        const checkboxVal = (document.getElementById('check').checked === true); // 4 additional neighbors\r\n        let [visitedNodesInOrder, leftNode, rightNode] = bidirectionalSearch(grid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, checkboxVal);\r\n        let path = [];\r\n\r\n        while (!rightNode.isFinish) {\r\n            path.push(rightNode); // getting shortest path from right part\r\n            rightNode = rightNode.previousNode;\r\n        }\r\n\r\n        path.push(grid[FINISH_NODE_ROW][FINISH_NODE_COL]);\r\n        path.reverse();\r\n\r\n        while (!leftNode.isStart) {\r\n            path.push(leftNode); // getting shortest path from left part\r\n            leftNode = leftNode.previousNode;\r\n        }\r\n\r\n        path.push(grid[START_NODE_ROW][START_NODE_COL]);\r\n\r\n        // animation\r\n        for (let i = 0; i <= visitedNodesInOrder.length; ++i) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateFoundPath(path);\r\n                }, 25 * i);\r\n\r\n                setTimeout(() => { // wait until animation ends\r\n                    this.toggleButtons(); // and then activate buttons\r\n                }, 25 * i + 25 * (path.length + 1));\r\n\r\n                return;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let j = 0; j < visitedNodesInOrder[i].length; ++j) {\r\n                    const [row, col] = visitedNodesInOrder[i][j];\r\n                    document.getElementById(`node-${row}-${col}`).className = 'node node-explore';\r\n                }\r\n            }, 25 * i);\r\n        }\r\n    }\r\n\r\n    dfs() {\r\n        this.toggleButtons(); // disable buttons\r\n        this.removePaths(); // clear paths from previous search\r\n        const {grid} = this.state;\r\n        const checkboxVal = (document.getElementById('check').checked === true); // 4 additional neighbors\r\n        const visitedNodesInOrder = depthFirstSearch(grid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, checkboxVal);\r\n        const path = this.getPath(grid[FINISH_NODE_ROW][FINISH_NODE_COL]);\r\n\r\n        // animation\r\n        for (let i = 1; i <= visitedNodesInOrder.length; ++i) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateFoundPath(path);\r\n                }, 30 * i);\r\n\r\n                setTimeout(() => { // wait until animations ends\r\n                    this.toggleButtons(); // and then activate buttons\r\n                }, 30 * i + 25 * (path.length + 1));\r\n\r\n                return;\r\n            }\r\n\r\n            const node = visitedNodesInOrder[i];\r\n\r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-explore';\r\n            }, 30 * i);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {grid, mouseIsPressed} = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div className='button-container'>\r\n                    <h2 id='bar-title'>Pathfinding Visualizer</h2>\r\n                    <button className='grid-buttons' disabled={this.state.animationInProgress} onClick={() => this.resetGrid()}>RESET GRID</button>\r\n                    <button className='grid-buttons' disabled={this.state.animationInProgress} onClick={() => this.removePaths()}>CLEAR PATHS</button>\r\n                    <label className='corner-label'>\r\n                        Allow crossing corners\r\n                        <input type='checkbox' id='check' checked={this.state.crossingCorners} onChange={this.toggleCheckbox}/>\r\n                    </label>\r\n                    <button className='algo-buttons' disabled={this.state.animationInProgress} onClick={() => this.dijkstra()}>Dijkstra's algo</button>\r\n                    <button className='algo-buttons' disabled={this.state.animationInProgress} onClick={() => this.aStar()}>A* Search</button>\r\n                    <button className='algo-buttons' disabled={this.state.animationInProgress} onClick={() => this.bidirectionalSearch()}>Bidirectional Search</button>\r\n                    <button className='algo-buttons' id='bfs-button' disabled={this.state.animationInProgress} onClick={() => this.bfs()}>BFS</button>\r\n                    <button className='algo-buttons' id='dfs-button' disabled={this.state.animationInProgress} onClick={() => this.dfs()}>DFS</button>\r\n                    <button className='additional-buttons' disabled={this.state.animationInProgress} onClick={() => this.createRandomGrid()}>CREATE RANDOM GRID</button>\r\n                </div>\r\n\r\n                <div className='grid'>\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div className='rows-distinct'\r\n                                key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const {row, col, isStart, isFinish, isWall} = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            row={row}\r\n                                            col={col}\r\n                                            isStart={isStart}\r\n                                            isFinish={isFinish}\r\n                                            isWall={isWall}\r\n                                            mouseIsPressed={mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row,col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={() => this.handleMouseUp()}>\r\n                                        </Node>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n\r\n                <div className='credits'>\r\n                    <p>&copy; Pathfinding Visualizer created by <a id='my-github' href='https://github.com/nikolatechie'>Nikola Grujic</a></p>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst calculateDimensions = () => {\r\n    ROWS = Math.floor((window.innerHeight - 200) / 28); // calculating number\r\n    COLS = Math.floor((window.innerWidth - 50) / 28); // of rows and columns\r\n    START_NODE_ROW = Math.floor(ROWS / 2); // depending on the screen size\r\n    if (ROWS % 2 !== 1) --START_NODE_ROW; // and calculating positions\r\n    FINISH_NODE_ROW = START_NODE_ROW; // of cells for the starting and\r\n    START_NODE_COL = Math.floor(COLS / 6); // finishing node\r\n    FINISH_NODE_COL = COLS - START_NODE_COL - 1;\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    calculateDimensions();\r\n\r\n    for (let row = 0; row < ROWS; ++row) {\r\n        const curRow = [];\r\n\r\n        for (let col = 0; col < COLS; ++col) {\r\n            curRow.push(createNode(row, col));\r\n        }\r\n\r\n        grid.push(curRow);\r\n    }\r\n\r\n    return grid;\r\n}\r\n\r\nconst createNode = (row, col) => {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};","export function dijkstrasAlgo(grid, row, col, crossingCorners) {\r\n    const visitedNodesInOrder = [];\r\n    grid[row][col].distance = 0; // setting distance of the start node to 0\r\n    const nodes = [];\r\n\r\n    for (let i = 0; i < grid.length; ++i) {\r\n        for (let j = 0; j < grid[0].length; ++j) {\r\n            if (!grid[i][j].isWall) // adding other nodes\r\n                nodes.push([i, j]);\r\n        }\r\n    }\r\n\r\n    // sort them by distance in non-descending order\r\n    nodes.sort((nodeA, nodeB) => grid[nodeA[0]][nodeA[1]].distance - grid[nodeB[0]][nodeB[1]].distance);\r\n    let dirx = [0, 0, -1, 1];\r\n    let diry = [-1, 1, 0, 0];\r\n    const n = nodes.length - 1;\r\n\r\n    if (crossingCorners) { // 8 neighbor-nodes\r\n        dirx = [-1, -1, -1, 0, 0, 1, 1, 1];\r\n        diry = [-1, 0, 1, -1, 1, -1, 0, 1];\r\n    }\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n        const [row, col] = nodes.shift(); // gets the closest node\r\n        grid[row][col].isVisited = true; // and sets it to visited\r\n        if (grid[row][col].isFinish) break; // no need for further search because we only care about path from start to finish node\r\n        const exploredNodes = [];\r\n\r\n        for (let j = 0; j < dirx.length; ++j) {\r\n            const newRow = row + dirx[j];\r\n            const newCol = col + diry[j];\r\n            if (newRow < 0 || newRow >= grid.length || newCol < 0 || newCol >= grid[0].length) continue;\r\n            if (grid[newRow][newCol].isVisited || grid[newRow][newCol].isWall) continue;\r\n\r\n            if (grid[row][col].distance + 1 < grid[newRow][newCol].distance) {\r\n                grid[newRow][newCol].distance = grid[row][col].distance+1;\r\n                grid[newRow][newCol].previousNode = grid[row][col];\r\n                exploredNodes.push(grid[newRow][newCol]); // save added nodes one by one\r\n            }\r\n        }\r\n\r\n        if (exploredNodes.length) visitedNodesInOrder.push(exploredNodes);\r\n        // and sort them again by distance in non-descending order\r\n        nodes.sort((nodeA, nodeB) => grid[nodeA[0]][nodeA[1]].distance - grid[nodeB[0]][nodeB[1]].distance);\r\n    }\r\n\r\n    return visitedNodesInOrder;\r\n}","export function breadthFirstSearch(grid, row, col, finRow, finCol, crossingCorners) {\r\n    const visitedNodesInOrder = [];\r\n    const q = [];\r\n    q.push([row, col]);\r\n    let dirx = [-1, 1, 0, 0];\r\n    let diry = [0, 0, -1, 1];\r\n\r\n    if (crossingCorners) { // 8 neighbor-nodes\r\n        dirx = [-1, -1, -1, 0, 0, 1, 1, 1];\r\n        diry = [-1, 0, 1, -1, 1, -1, 0, 1];\r\n    }\r\n\r\n    while (q.length) {\r\n        if (grid[finRow][finCol].isVisited) break; // stop further search when a path is found\r\n        const [row, col] = q.shift();\r\n        grid[row][col].isVisited = true;\r\n        const newLvl = []; // save neighbor-nodes of the current node\r\n\r\n        for (let i = 0; i < dirx.length; ++i) {\r\n            const newRow = row + dirx[i];\r\n            const newCol = col + diry[i];\r\n\r\n            if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length && !grid[newRow][newCol].isVisited && !grid[newRow][newCol].isWall) {\r\n                q.push([newRow, newCol]);\r\n                if (!(newRow === finRow && newCol === finCol)) newLvl.push([newRow, newCol]);\r\n                grid[newRow][newCol].isVisited = true;\r\n                grid[newRow][newCol].previousNode = grid[row][col];\r\n            }\r\n        }\r\n\r\n        if (!newLvl.empty) visitedNodesInOrder.push(newLvl);\r\n    }\r\n\r\n    return visitedNodesInOrder;\r\n}","import React from 'react';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}